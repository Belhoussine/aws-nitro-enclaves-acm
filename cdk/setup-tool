#!/bin/bash

VERSION="1.0"
NAME="acmne-setup-tool"

# Enhanced utility functions
say() {
    [ -t 1 ] && [ -n "$TERM" ] \
        && echo "$(tput setaf 2)[$NAME]$(tput sgr0) $*" \
        || echo "[$NAME] $*"
}

say_err() {
    [ -t 2 ] && [ -n "$TERM" ] \
        && echo "$(tput setaf 1)[$NAME] $*$(tput sgr0)" 1>&2 \
        || echo "[$NAME] $*" 1>&2
}

die() {
    local code=1
    [[ "$1" = "-c" ]] && {
        code="$2"
        shift 2
    }
    [[ $code -ne 0 ]] && say_err "$@"
    exit "$code"
}

ok_or_die() {
    local code=$?
    [[ $code -eq 0 ]] || die -c $code "$@"
}

ensure_npx_installed() {
    which npx > /dev/null 2>&1
    ok_or_die "NPX cannot be found. Aborting." \
        "Please make sure you have NPX installed."
}

ensure_cdk_cli_installed() {
    which cdk > /dev/null 2>&1
    ok_or_die "The CDK CLI cannot be found. Aborting." \
        "Please make sure you have AWS CDK CLI installed."
}

validate_setup_name() {
    local setup_name="$1"
    if [[ ! "$setup_name" =~ ^[a-zA-Z0-9-]+$ ]]; then
        die "Invalid setup name. Use only alphanumeric characters and hyphens."
    fi
    if [[ ${#setup_name} -gt 128 ]]; then
        die "Setup name too long. Maximum length is 128 characters."
    fi
}

# Deploy command implementation
run_deploy_command() {
    local setup_name=""
    local args="$*"
    
    # Extract setup name from arguments if present
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --setup-name)
                setup_name="$2"
                validate_setup_name "$setup_name"
                shift 2
                ;;
            *)
                shift
                ;;
        esac
    done
    
    [[ -n "$setup_name" ]] && say "Deploying setup: ${setup_name}"
    
    CLI_COMMAND="npx ts-node --prefer-ts-exts src/bin/cli.ts ${args}"
    
    cdk deploy --all --app \""${CLI_COMMAND}"\"
    ok_or_die "Failed to deploy"

    [[ -n "$setup_name" ]] && say "Successfully deployed stacks for setup: ${setup_name}"
}

# Destroy command implementation
run_destroy_command() {
    local setup_name=""
    local destroy_certificate=false
    local destroy_role=false
    local destroy_instance=false
    local filtered_args=()

    # First argument is filtered args array
    if [[ $# -gt 3 ]]; then
        filtered_args=("${@:1:$#-3}")
    fi
    
    # Last 3 arguments are the flags
    destroy_certificate="${*: -3:1}" 
    destroy_role="${*: -2:1}"
    destroy_instance="${*: -1:1}"

    # Extract setup name from filtered args
    local i=0
    while [[ $i -lt ${#filtered_args[@]} ]]; do
        case "${filtered_args[$i]}" in
            --setup-name)
                setup_name="${filtered_args[$((i+1))]}"
                validate_setup_name "$setup_name"
                break
                ;;
        esac
        ((i++))
    done

    CLI_COMMAND=\""npx ts-node --prefer-ts-exts src/bin/cli.ts ${filtered_args[*]}"\"

    say "Destroying specific stacks for setup: ${setup_name}"
    
    local stacks_to_destroy=()
    # Build list of stacks to destroy
    if [[ "$destroy_instance" == true ]]; then
        stacks_to_destroy+=("${setup_name}-InstanceStack")
    fi
    if [[ "$destroy_role" == true ]]; then
        stacks_to_destroy+=("${setup_name}-RoleStack")
    fi
    if [[ "$destroy_certificate" == true ]]; then
        stacks_to_destroy+=("${setup_name}-CertificateStack")
    fi

    if [[ ${#stacks_to_destroy[@]} -eq 0 ]]; then
        die "No stacks specified for destruction"
    fi

    # Join stack names with spaces
    say "Executing: cdk destroy --app ${CLI_COMMAND} ${stacks_to_destroy[*]}"
    cdk destroy --app "${CLI_COMMAND}" "${stacks_to_destroy[@]}"
    
    ok_or_die "Failed to destroy stack(s)"
    say "Success!"
}

parse_deploy_args() {
    if [ -z "$2" ] || [ "$2" == "-h" ] || [ "$2" == "--help" ]; then
        npx ts-node --prefer-ts-exts src/bin/cli.ts -h
        die -c 0
    fi
    run_deploy_command "$@"
}

parse_destroy_args() {
    local filtered_args=()
    local setup_name=""
    local destroy_certificate=false
    local destroy_role=false
    local destroy_instance=false

    # Parse and filter arguments
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --setup-name)
                setup_name="$2"
                filtered_args+=("$1" "$2")
                shift 2
                ;;
            --all)
                destroy_instance=true
                destroy_role=true
                destroy_certificate=true
                shift
                ;;
            --certificate-stack)
                destroy_certificate=true
                shift
                ;;
            --role-stack)
                destroy_role=true
                shift
                ;;
            --instance-stack)
                destroy_instance=true
                shift
                ;;
            *)
                filtered_args+=("$1")
                shift
                ;;
        esac
    done

    # Validate setup name
    if [[ -z "$setup_name" ]]; then
        die "Setup name is required"
    fi

    run_destroy_command "${filtered_args[@]}" "$destroy_certificate" "$destroy_role" "$destroy_instance"
}

show_help() {
    say "Usage: $(basename "$0") <command> [options]"
    say "Commands:"
    say "       deploy    Deploy a new ACM setup"
    say "           --help                  Show the deploy options" 
    say "       destroy   Destroy one or all existing stacks attached to a setup name"
    say "           --setup-name <name>                 Name of the setup to destroy"
    say "           --aws-account-id <aws_account_id>   AWS Account ID"
    say "           --aws-region <aws_region>           AWS Region"
    say "           --certificate-stack                 Destroy the certificate stack attached to the provided setup name" 
    say "           --role-stack                        Destroy the role stack attached to the provided setup name" 
    say "           --instance-stack                    Destroy the instance stack belonging attached to the provided setup name" 
    say "           --all                               Destroy all stacks attached to the provided setup name"
    say "       help      Show this help message"
}

main() {
    ensure_cdk_cli_installed
    ensure_npx_installed

    local command="$1"

    case "$command" in
        deploy)
            parse_deploy_args "$@"
            ;;
        destroy)
            parse_destroy_args "$@"
            ;;
        help|-h|--help)
            show_help
            ;;
        version|-v|--version)
            say "${NAME} version ${VERSION}"
            exit 0
            ;;
        *)
            say_err "Unknown command: $command"
            show_help
            exit 1
            ;;
    esac
}

main "$@"